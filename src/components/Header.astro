---
import HeaderLink from './HeaderLink.astro';
import { SITE_TITLE } from '../consts';
---

<header>
	<nav>
		<h2><a href="/">{SITE_TITLE}</a></h2>
		<div class="internal-links">
			<HeaderLink href="/">Home</HeaderLink>
			<HeaderLink href="#experience">Experience</HeaderLink>
			<HeaderLink href="#github-projects">Projects</HeaderLink>
			<a href="Jessica_Sewe_Guriyire_Resume.pdf" target="_blank" class="resume-button">Resume</a>
		</div>
	</nav>
</header>
<style>
	header {
		position: sticky;
		top: 0;
		margin: 0;
		padding: 0 1em;
		background: white;
		box-shadow: 0 2px 8px rgba(var(--black), 5%);
		z-index: 1000;
	}
	h2 {
		margin: 0;
		font-size: 1em;
	}

	h2 a,
	h2 a.active {
		text-decoration: none;
	}
	nav {
		display: flex;
		align-items: center;
		justify-content: space-between;
	}
	nav a {
		padding: 1em 0.5em;
		color: var(--black);
		border-bottom: 4px solid transparent;
		text-decoration: none;
		font-size: 0.9em;
	}
	nav a.active, .resume-button.active {
		text-decoration: none;
		border-bottom-color: var(--accent);
	}

	/* Resume Button Styling */
	.resume-button {
		padding: 0.5em 1em;
		border-radius: 30px;
		background: transparent;
		color: var(--black);
		font-weight: bold;
		cursor: pointer;
		text-decoration: none;
		transition: all 0.1s ease;
	}

	.resume-button:hover {
		background: var(--accent);
		color: white;
	}
	@media (max-width: 720px) {
		.social-links {
			display: none;
		}
		.internal-links {
        display: none;
    	}
	}
</style>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const sections = document.querySelectorAll("section");
        const navLinks = document.querySelectorAll("nav a");

        const observer = new IntersectionObserver(
            (entries) => {
                entries.forEach((entry) => {
                    if (entry.isIntersecting) {
                        navLinks.forEach((link) => {
                            link.classList.remove("active");
                            if (link.getAttribute("href") === `#${entry.target.id}`) {
                                link.classList.add("active");
                            }
                        });
                    }
                });
            },
            { threshold: 0.5 } // Adjust the threshold for when it considers the section "active"
        );

        sections.forEach((section) => {
            observer.observe(section);
        });
    });
</script>

